{
  "name": "auth",
  "version": "0.0.2",
  "description": "ERROR: No README.md file found!",
  "main": "./lib/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/crcn/node-auth.git"
  },
  "author": "",
  "license": "BSD",
  "dependencies": {
    "outcome": "0.0.x",
    "step": "0.0.x",
    "structr": "0.2.x",
    "underscore": "1.4.x",
    "dsync": "0.0.x",
    "vine": "0.0.x",
    "dustjs-linkedin": "1.1.x"
  },
  "devDependencies": {
    "plugin": "*",
    "plugin-express": "0.0.x",
    "plugin-mongodb": "0.0.x"
  },
  "readme": "### TODO\n\n- ability to invite people, and grant permissions upon signup (trigger)\n- ability to have a beta process where only invited people are granted access \n- timer that allows you to grant privileges for collections\n\n\n### Example\n\n```javascript\n\nvar mdblite = require(\"mongodblite\"),\nstep = require(\"step\");\n\n//initialize the authenticator\nvar auth = require(\"auth\").init({\n\tconnection: mdblite.db(new mdblite.drivers.Memory()),\n\tfields: {\n\t\temail: {\n\t\t\tassignTo: \"username\",\n\t\t\ttest: \"email\"\n\t\t},\n\t\tpassword: {\n\t\t\ttest: \"test\",\n\t\t\thash: function(password) {\n\t\t\t\treturn password; //hash it here\n\t\t\t}\n\t\t},\n\t\tfullName: {\n\t\t\toptional: true\n\t\t}\n\t}\n});\n\n\nvar credits = {\n\tusername: \"me@gmail.com\",\n\tpassword: \"myPass\"\n};\n\n\nstep(\n\n\t/**\n\t */\n\t\n\tfunction() {\n\t\tauth.signup(credits, this);\n\t},\n\n\t/**\n\t */\n\n\tfunction(err, user) {\n\t\tuser.getToken(this);\n\t},\n\n\n\t/**\n\t */\n\n\tfunction(err, session) {\n\t\t//do something with session\n\t}\n\n);\n\n\n\n```\n\n\n### Sharing sessions\n\nuser accounts can be shared. Here's an example:\n\n```javascript\n//same connection code as above\n\nstep(\n\tfunction(err, user) {\n\t\tuser.grantPermission(user2, [\"GET:friends:myFriendId\"], this);\n\t},\n\tfunction(err, data) {\n\t\tconsole.log(data.token.scopes); //contains access to user scope\n\n\t\tauth.sandbox(\"GET:friends:myFriendId\").login(token, function(err, data) {\n\n\t\t\tconsole.log(data.access); //{ profiles: ['user1', 'user2' ], collections: { friends: 'myFriendId' }}\n\t\t});\n\t}\n}\n);\n``` \n\n\n\n### API\n\n#### auth.signup(options, onSignup)\n\nsigns a user up\n\n#### auth.login(options, onLogin)\n\nlogs a user in\n\n- options \n\t- `token`    - the session token for logging in\n\t- `username` - the username of the user\n\t- `password` - the password of the user\n\t- `data`     - additional data for the scope\n\n#### user.grantPermissions(user, permisions, onToken)\n\ngrants target user permissions\n\n#### user.createToken(permissions, onToken)\n\ncreates a new token with the given permissions. This is useful for giving access to a user's account with a limited scope.\n\n#### user.getToken(onSession)\n\nreturns the user's main login token\n\n#### user.remove()\n\nremoves a user\n\n#### token.regenerateToken(onGenerateToken)\n\nregenerates the token's public key\n\n#### token.remove()\n\nremoves a token\n",
  "readmeFilename": "README-2.md",
  "_id": "auth@0.0.2",
  "_from": "auth"
}
