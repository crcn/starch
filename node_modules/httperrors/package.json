{
  "author": {
    "name": "Andreas Lind Petersen",
    "email": "andreas@one.com"
  },
  "name": "httperrors",
  "description": "Handy JavaScript Error classes representing the standard HTTP errors. Easily extensible and subclassable.",
  "keywords": [
    "http",
    "errors",
    "error",
    "request",
    "proxy",
    "client",
    "class",
    "errorclass"
  ],
  "version": "0.2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/One-com/node-httperrors.git"
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.2.0"
  },
  "dependencies": {
    "createerror": "0.0.1"
  },
  "scripts": {
    "test": "mocha --ui qunit test.js"
  },
  "devDependencies": {
    "mocha": "1.x.x"
  },
  "publishConfig": {
    "repository": "http://registry.npmjs.org/"
  },
  "readme": "node-httperrors\n===============\n\nExposes HTTP 4xx and 5xx status codes as JavaScript Error objects. The error classes are created using the <a href=\"https://github.com/One-com/node-createerror\">createError module</a>.\n\nThe original use case for `httpErrors` is to use a custom <a href=\"https://github.com/visionmedia/express\">express</a> error handler that uses the `statusCode` property of the error instance as the status code for the response, and optionally logs further info from the error.\n\n\nInstallation\n------------\n\nMake sure you have node.js and npm installed, then run:\n\n    npm install httperrors\n\nUsage\n-----\n\n    var httpErrors = require('httperrors');\n\n    // Instantiate by name (UpperCamelCase):\n    var err = new httpErrors.NotFound('The thing you were looking for was not found');\n\n    console.warn(err.toString()); // NotFound [404]: The thing you were looking for was not found\n\n    if (identityCrisis) {\n        throw new httpErrors.ImATeapot('Dude...');\n    }\n\nThe CamelCased error name is exposed as a true property on the\ninstances, so your error handling code becomes quite readable (and you\ncan avoid using instanceof):\n\n    if (err.NotFound) {\n        // ...\n    } else if (err.BadGateway) {\n        // ...\n    }\n\nYou can also create an error by status code (useful when proxying):\n\n    function fetchSomething(cb) {\n        var request = require('request');\n        request('http://example.com/thething', function (err, response) {\n            if (err) {\n                return cb(new (httpErrors[response.statusCode] || httpErrors.BadGateway)());\n            }\n            // ...\n        });\n    }\n\nLicense\n-------\n\n3-clause BSD license -- see the `LICENSE` file for details.\n",
  "readmeFilename": "README.md",
  "_id": "httperrors@0.2.0",
  "dist": {
    "shasum": "863d34f044125a18edc04e404f35cda30ebfbc08"
  },
  "_from": "httperrors"
}
