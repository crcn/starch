{
  "author": {
    "name": "Craig Condon"
  },
  "name": "strscanner",
  "description": "lexical string analysis for javascript",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/crcn/strscan.js.git"
  },
  "main": "./lib/index.js",
  "dependencies": {},
  "devDependencies": {},
  "readme": "### Example\n\n\n```javascript\n\nvar strscan = require(\"strscan\");\n\nvar scanner = strscan(\"hello world -> \", {\n\tskipWhitespace: true\n});\n\n\nwhile(!scanner.eof()) {\n\t\n\tscanner.nextChar();\n\n\tif(scanner.isAZ()) {\n\t\tvar word = scanner.nextWord();\n\t} else \n\tif(scanner.cchar() == \"-\") {\n\t\tvar arrow = scanner.to(1);\n\t}\n}\n\n```\n\n\n\n### API\n\n\n#### .eof() \n\nreturns true if the scanner is at the end\n\n\n#### .nextChar()\n\nscans to the next character\n\n#### .cchar()\n\nreturns the current char\n\n#### .isAZ()\n\nreturns true if the current char is A-Z\n\n#### .is09()\n\nreturns true if the current char is 0-9\n\n\n#### .isAlpha()\n\nreturns true if the current char is A-Z 0-9\n\n\n#### .next(match)\n\nreturns true if the current char matches the given regular expression\n\n#### .nextWord()\n\nreturns the next word\n\n#### .to(count)\n\nscans to the given position, and returns the buffer\n\n#### .peek(count)\n\nreturns a buffer from the current position to the given count, then rewinds\n\n#### .rewind(count)\n\nrewinds N characters\n\n#### .skip(count)\n\nskips N characters\n\n\n",
  "_id": "strscanner@0.0.1",
  "_from": "strscanner@0.0.x"
}
