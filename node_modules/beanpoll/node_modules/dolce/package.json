{
  "name": "dolce",
  "description": "Collections with syntactic sugar",
  "version": "0.0.13",
  "repository": {
    "url": ""
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "crema": "*",
    "sift": "*",
    "underscore": "1.2.x"
  },
  "devDependencies": {
    "benchmark": "*",
    "colors": "*",
    "vows": "*"
  },
  "main": "./lib/index.js",
  "author": {
    "name": "Craig Condon"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "\nDolce is a collection library used primarily for routing.  [![Build Status](https://secure.travis-ci.org/crcn/dolce.js.png)](https://secure.travis-ci.org/crcn/dolce)\n\n## Use Cases:\n\n\n\n\n## Basic Example:\n\n```javascript\nvar dolce = require('dolce'),\ncol1 = dolce.collection(),\ncol2 = dolce.collection(),\ncol3 = dolce.collection(),\ncol4 = dolce.collection(),\ncol5 = dolce.collection();\n\n//explicit chain\ncol1.add('hello', 'HELLO');\ncol1.add('hello -> world', 'WORLD');\n\nconsole.log(col1.get('world')); //[{ value: 'HELLO' }, { value: 'WORLD' }]\n\n//parameters\ncol5.add('validate/:name');\ncol5.add('validate/:firstName -> add/user/:firstName/:lastName');\nconsole.log(col5.get('add/user/craig/condon')); //[{ value: 'HELLO' }, { value: 'WORLD' }]\n\n//implicit chain\ncol2.add('hello/*', 'HELLO')\ncol2.add('hello', 'WORLD');\n\nconsole.log(col2.get('hello')); //[{ value: 'HELLO' }, { value: 'WORLD' } ]\n\n//greedy chain\ncol3.add('hello/**', 'HELLO')\ncol3.add('hello/awesome/**', 'AWESOME');\ncol3.add('hello/awesome/world', 'WORLD');\n\nconsole.log(col3.get('hello/awesome/world')); //[{ value: 'HELLO' }, { value: 'AWESOME' }, { value: 'WORLD' } ]\n\n//filtering chains\ncol4.add('-method=UPDATE users/:userid','update user');\ncol4.add('-method=DELETE users/:userid', 'delete user');\ncol4.add('-method=GET users/:userid', 'get user');\n\nconsole.log(col4.get('users/14732843', { tags: { method: 'GET' } })); //[{ tags: { method: 'GET' }, value: 'get user' }];\n```\n\n## API\n\n### .add(type, value);\n\nAdds data to the collection\n\n\n### .addObject(value);\n\nAdds an object to the collection\n\n```javascript\n\ncollection.addObject({\n\t'key': 1,\n\t'key2': 2\n})\n```\n\n### .get(channel[, ops])\n\nReturns a collection based on the params given\n\n- `channel` - the path to the value, e.g., 'add/user', 'validate/some/stuff'\n- `ops` - the options for fetching data\n\t- `tags` - the tags to filter against\n\nA returned value may look something like this:\n\n```javascript\n\n{\n  \"paths\": [\n    {\n      \"value\": \"users\",\n      \"param\": false\n    },\n    {\n      \"value\": \"14732843\",\n      \"param\": false\n    }\n  ],\n  \"tags\": {\n    \"method\": \"GET\"\n  },\n  \"chains\": [\n    [\n      {\n        \"paths\": [\n          {\n            \"value\": \"users\",\n            \"param\": false\n          },\n          {\n            \"value\": \"userid\",\n            \"param\": true\n          }\n        ],\n        \"params\": {\n          \"userid\": \"14732843\"\n        },\n        \"tags\": {\n          \"method\": \"GET\"\n        },\n        \"value\": \"get user\"\n      }\n    ]\n  ]\n}\n\n```\n\n### .contains(channel[, ops])\n\nTRUE if the given channel exists in the collection. API is the same as `.get`\n\n\n## Caveats\n\n```javascript\n\ncollection.add('-anotherTag validate/**');\ncollection.add('-method=POST validate/**');\ncollection.get('-method=POST validate/login');\n\n//goes through -method=POST validate/** before getting to login, NOT -anotherTag validate/** \ncollection.get('validate/login'); \n\n\ncollection.add('-method=POST validate/**');\ncollection.get('-method validate/login');\n\n//does NOT go through validate/** because the method is not POST\ncollection.get('validate/login'); \n\n\n\n//this doesn't work\ncollection.add(':param/*');\n\n//with this.\ncollection.add('path');\n\n//but with this this:\ncollection.add('someParam');\n\n```\n\n\n\n\n",
  "_id": "dolce@0.0.13",
  "_from": "dolce@<0.2.0"
}
